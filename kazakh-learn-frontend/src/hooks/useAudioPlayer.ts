// src/hooks/useAudioPlayer.ts - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sound_url –∏–∑ word_sounds
import { useQuery } from '@tanstack/react-query';
import { toast } from 'sonner';
import { wordsAPI } from '../services/api';
import type { KazakhWord, KazakhWordSummary, WordSound } from '../types/api';

interface UseAudioPlayerProps {
  wordId: number;
  word?: KazakhWord | KazakhWordSummary | any; // –î–æ–±–∞–≤–ª—è–µ–º any –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LearningWord
}

export const useAudioPlayer = ({ wordId, word }: UseAudioPlayerProps) => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ —Å–ª–æ–≤–∞ –∏–∑ FastAPI
  const { data: wordSounds } = useQuery({
    queryKey: ['word-sounds', wordId],
    queryFn: () => wordsAPI.getWordSounds(wordId),
    enabled: !!wordId,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    retry: 1 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∞—É–¥–∏–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î)
  const getAudioFallbackSources = (): string[] => {
    if (!word) return [];
    
    const sources = [];
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID
    const categoryId = word.category_id || (word.category && word.category.id);
    if (categoryId) {
      sources.push(`/audio/words/categories/${categoryId}/${word.id}.mp3`);
      sources.push(`/audio/words/categories/${categoryId}/${word.id}.wav`);
      sources.push(`/audio/words/categories/${categoryId}/${word.id}.ogg`);
    }
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryName = word.category_name || (word.category && word.category.category_name);
    if (categoryName) {
      const safeWordName = word.kazakh_word.replace(/\s+/g, '_').toLowerCase();
      const safeCategoryName = categoryName.toLowerCase();
      
      sources.push(`/audio/words/categories/${safeCategoryName}/${safeWordName}.mp3`);
      sources.push(`/audio/words/categories/${safeCategoryName}/${safeWordName}.wav`);
      sources.push(`/audio/words/categories/${safeCategoryName}/${word.id}.mp3`);
      sources.push(`/audio/words/categories/${safeCategoryName}/${word.id}.wav`);
    }
    
    // –ü—Ä—è–º—ã–µ –ø—É—Ç–∏ –ø–æ ID —Å–ª–æ–≤–∞
    sources.push(`/audio/words/${word.id}.mp3`);
    sources.push(`/audio/words/${word.id}.wav`);
    
    // –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    sources.push(`/audio/${word.id}.mp3`);
    
    // Fallback –∞—É–¥–∏–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (categoryName) {
      sources.push(`/audio/words/placeholders/${categoryName.toLowerCase()}_sample.mp3`);
    }
    
    // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
    sources.push(`/audio/words/placeholders/default_pronunciation.mp3`);
    
    console.log(`üéµ Generated ${sources.length} fallback audio sources for word ${word.id}:`, sources);
    return sources;
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const playAudio = async (customMessageSuccess?: string, customMessageError?: string) => {
    if (!word) {
      console.log('‚ùå No word data available for audio playback');
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ');
      return;
    }

    console.log(`üéµ Starting audio playback for word: ${word.kazakh_word} (id: ${word.id})`);
    console.log('üéµ WordSounds from database:', wordSounds);
    
    let audioSources: string[] = [];
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º sound_url –∏–∑ word_sounds (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    if (wordSounds && wordSounds.length > 0) {
      console.log('üéµ Using audio from database (word_sounds)');
      
      // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∑–≤—É–∫–∏ —Å —Ç–∏–ø–æ–º 'pronunciation', –∑–∞—Ç–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ
      const pronunciationSounds = wordSounds.filter(sound => sound.sound_type === 'pronunciation');
      const otherSounds = wordSounds.filter(sound => sound.sound_type !== 'pronunciation');
      const orderedSounds = [...pronunciationSounds, ...otherSounds];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ sound_url –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      orderedSounds.forEach(sound => {
        if (sound.sound_url) {
          audioSources.push(sound.sound_url);
          console.log(`üéµ Added database audio: ${sound.sound_url} (type: ${sound.sound_type})`);
        }
      });
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ pronunciations (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ —Å–ª–æ–≤–∞)
    if ('pronunciations' in word && word.pronunciations && word.pronunciations.length > 0) {
      word.pronunciations.forEach((pronunciation: any) => {
        if (pronunciation.audio_file_path) {
          audioSources.push(pronunciation.audio_file_path);
          console.log(`üéµ Added pronunciation audio: ${pronunciation.audio_file_path}`);
        }
      });
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞—É–¥–∏–æ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—É—Ç–∏
    if (audioSources.length === 0) {
      console.log('üéµ No database audio found, using fallback sources');
      audioSources = getAudioFallbackSources();
    }
    
    if (audioSources.length === 0) {
      console.log('‚ùå No audio sources available');
      toast.error(customMessageError || '–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      return;
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueSources = audioSources.filter((source, index) => audioSources.indexOf(source) === index);
    console.log(`üîÑ Trying ${uniqueSources.length} unique audio sources`);
    
    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (let i = 0; i < uniqueSources.length; i++) {
      const audioSrc = uniqueSources[i];
      console.log(`üîÑ Attempting source ${i + 1}/${uniqueSources.length}: ${audioSrc}`);
      
      try {
        const audio = new Audio(audioSrc);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        await new Promise((resolve, reject) => {
          const timeout = setTimeout(() => {
            reject(new Error('Audio load timeout'));
          }, 5000);
          
          audio.addEventListener('canplaythrough', () => {
            clearTimeout(timeout);
            resolve(true);
          }, { once: true });
          
          audio.addEventListener('error', (e) => {
            clearTimeout(timeout);
            reject(e);
          }, { once: true });
          
          audio.load();
        });
        
        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
        await audio.play();
        console.log(`‚úÖ Successfully played audio from: ${audioSrc}`);
        toast.success(customMessageSuccess || '–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ');
        return;
        
      } catch (error) {
        console.log(`‚ùå Failed to play from: ${audioSrc}`, error);
        continue;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    console.log('‚ùå All audio sources failed');
    toast.error(customMessageError || '–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞ (WordSound –æ–±—ä–µ–∫—Ç)
  const playIndividualSound = async (sound: WordSound, customMessageSuccess?: string, customMessageError?: string) => {
    console.log('üéµ Playing individual sound:', sound);
    
    if (!sound.sound_url) {
      console.log('‚ùå No sound_url available in WordSound object');
      toast.error(customMessageError || 'URL –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    
    const audioUrl = sound.sound_url;
    console.log('üîÑ Trying to play individual sound from sound_url:', audioUrl);
    
    try {
      const audio = new Audio(audioUrl);
      
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Audio timeout'));
        }, 5000);
        
        audio.addEventListener('canplaythrough', () => {
          clearTimeout(timeout);
          resolve(true);
        }, { once: true });
        
        audio.addEventListener('error', (e) => {
          clearTimeout(timeout);
          reject(e);
        }, { once: true });
        
        audio.load();
      });
      
      await audio.play();
      console.log(`‚úÖ Successfully played individual sound: ${audioUrl}`);
      toast.success(customMessageSuccess || '–ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ');
    } catch (error) {
      console.log(`‚ùå Failed to play individual sound: ${audioUrl}`, error);
      toast.error(customMessageError || '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ
  const hasAudio = wordSounds && wordSounds.length > 0;

  return {
    wordSounds,
    playAudio,
    playIndividualSound,
    hasAudio: hasAudio || false, // –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ –ë–î
    getAudioSources: getAudioFallbackSources
  };
};